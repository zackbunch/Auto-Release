stages:
  - setup      # compile + comment logic
  - build      # image build
  - release    # tagging and promotion

# -----------------------------------------------
# Compile syac binary for use in later stages
# -----------------------------------------------
build_binary:
  stage: setup
  image: golang:1.24
  variables:
    SYAC_APPLICATION_NAME: syaccli
  script:
    - CGO_ENABLED=0 go build -o syac -ldflags '-extldflags "-static"' .
  after_script:
    - chmod +x syac
    - ./syac context
  artifacts:
    paths:
      - syac
    expire_in: 1 hour

# -----------------------------------------------
# Post version bump comment in MRs
# -----------------------------------------------
comment_bump_selector:
  stage: setup
  image: registry.simulogix.com/personal-websites/syac/feature/syac:latest
  script:
    - syac comment
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success

# -----------------------------------------------
# Build on feature branches — gmarm-* (no push) 
# -----------------------------------------------
build_feature:
  stage: build
  extends: [.build-dind, .build-common]
  image: registry.simulogix.com/personal-websites/syac/feature/syac:latest
  variables:
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/feature/$CI_COMMIT_REF_NAME"
    PUSH_IMAGE: "false"
  script:
    - syac context
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^gmarm-\d+$/'

# -----------------------------------------------
# Build on dev — push SHA + latest
# -----------------------------------------------
build_dev:
  stage: build
  extends: [.build-dind, .build-common]
  variables:
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/dev"
    PUSH_IMAGE: "true"
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never