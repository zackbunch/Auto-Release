include:
  - project: 'personal-websites/pipeline-templates'
    ref: 'main'
    file: '/.ci-templates/docker.gitlab-ci.yml'

variables:
  SHORT_SHA: $CI_COMMIT_SHORT_SHA
  APP_NAME: syaccli

stages:
  - setup
  - build
  - release

# -----------------------------------------------
# Build on feature branches — gmarm-* (no push) 
# -----------------------------------------------
build_feature:
  stage: build
  extends: [.build-dind, .build-common]
  image: registry.simulogix.com/personal-websites/syac/feature/syac:latest
  variables:
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/feature/$CI_COMMIT_REF_NAME"
    PUSH_IMAGE: "false"
  script:
    - syac context
    - syac comment --dry-run
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^gmarm-\d+$/'


# -----------------------------------------------
# Build on dev — push SHA + latest
# -----------------------------------------------
build_dev:
  stage: build
  extends: [.build-dind, .build-common]
  variables:
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/dev"
    PUSH_IMAGE: "true"
  rules:
    # Only run if this is a merge result into dev
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never

# This job compiles the syac binary, which is then used by the publish stage.
build_binary:
  stage: setup
  image: golang:1.24
  variables:
    SYAC_APPLICATION_NAME: syaccli
  script:
    # Build a statically-linked binary to ensure it runs in the minimal Docker container.
    - CGO_ENABLED=0 go build -o syac -ldflags '-extldflags "-static"' .
  after_script:
    - chmod +x syac
    - ./syac context
  artifacts:
    paths:
      - syac
    expire_in: 1 hour

