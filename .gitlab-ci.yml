include:
  - local: '.ci-templates/docker.gitlab-ci.yml'
  - local: '.ci-templates/secrets.gitlab-ci.yml'

variables:
  BRANCH_SLUG:    $CI_COMMIT_REF_SLUG
  BRANCH_IMAGE:   $CI_REGISTRY_IMAGE/development/$BRANCH_SLUG
  IMAGE_SHORT:    $CI_COMMIT_SHORT_SHA
  REG:            $CI_REGISTRY_IMAG
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  SHORT_SHA: $CI_COMMIT_SHORT_SHA
  APP_NAME: syac
  IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/$TARGET_ENV/$APP_NAME"

  SECURE_ANALYZERS_PREFIX:       "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SECRET_DETECTION_IMAGE_SUFFIX: ""
  SECRETS_ANALYZER_VERSION:      "7"
  SECRET_DETECTION_EXCLUDED_PATHS: ""
  SYAC_SPRINT: "329"

stages:
  - setup
  - build
  - build-rc
  - scan
  - promote
  - release

# This job compiles the syac binary, which is then used by the publish stage.
build_binary:
  stage: setup
  image: golang:1.24
  variables:
    SYAC_APPLICATION_NAME: syaccli
  script:
    # Build a statically-linked binary to ensure it runs in the minimal Docker container.
    - CGO_ENABLED=0 go build -o syac -ldflags '-extldflags "-static"' .
  after_script:
    - chmod +x syac
    - ./syac context
  artifacts:
    paths:
      - syac
    expire_in: 1 hour

build_feature_branch:
  extends: .build-dind
  stage: build
  variables:
    TARGET_ENV: feature
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/feature/$APP_NAME"
  script:
    - docker build -t "$IMAGE_ENV_PATH:$SHORT_SHA" .
    - docker tag "$IMAGE_ENV_PATH:$SHORT_SHA" "$IMAGE_ENV_PATH:latest"
    - docker push "$IMAGE_ENV_PATH:$SHORT_SHA"
    - docker push "$IMAGE_ENV_PATH:latest"
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^gm-/'  # feature branches
      when: always



# -----------------------------------------------------------------------------
# 1) Feature builds (no push)
# -----------------------------------------------------------------------------
# build_feature:
#   extends: .build-dind
#   stage: build
#   dependencies:
#     - build_binary
#   rules:
#     - if: '$CI_COMMIT_REF_NAME =~ /^gm-[0-9]+$/ && $CI_PIPELINE_SOURCE != "merge_request_event"'
#       when: always
#     - when: never
#   before_script:
#     - chmod +x syac
#     - ./syac context
#   script:
#     - echo "Building feature image (no push) $BRANCH_IMAGE:$IMAGE_SHORT"
#     - ./syac build
#     - ./syac push --dry-run
#     # - docker build -t "$BRANCH_IMAGE:$IMAGE_SHORT" .

# # -----------------------------------------------------------------------------
# # 2) RC build on MR â†’ dev
# # -----------------------------------------------------------------------------
# build_rc:
#   extends:
#     - .build-dind
#   stage: build-rc
#   environment:
#     name: dev
#     url: https://dev.apps.openshift.com 
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
#       when: always
#     - when: never
#   script:
#     - docker pull "$REG:dev-latest" || true
#     - docker build --cache-from "$REG:dev-latest" -t "$REG:dev-$IMAGE_SHORT" .
#     - docker push "$REG:dev-$IMAGE_SHORT"
#     - docker tag "$REG:dev-$IMAGE_SHORT" "$REG:dev-latest"
#     - docker push "$REG:dev-latest"

