include:
  - local: '.ci-templates/docker.gitlab-ci.yml'

variables:
  BRANCH_SLUG:    $CI_COMMIT_REF_SLUG
  BRANCH_IMAGE:   $CI_REGISTRY_IMAGE/development/$BRANCH_SLUG
  IMAGE_SHORT:    $CI_COMMIT_SHORT_SHA
  REG:            $CI_REGISTRY_IMAGE

  SECURE_ANALYZERS_PREFIX:       "$CI_TEMPLATE_REGISTRY_HOST/security-products"
  SECRET_DETECTION_IMAGE_SUFFIX: ""
  SECRETS_ANALYZER_VERSION:      "7"
  SECRET_DETECTION_EXCLUDED_PATHS: ""
  SYAC_SPRINT: "329"

stages:
  - setup
  - build
  - build-rc
  - scan
  - promote
  - release

# This job compiles the syac binary, which is then used by the publish stage.
build_binary:
  stage: setup
  image: golang:1.24
  variables:
    SYAC_APPLICATION_NAME: syaccli
  script:
    # Build a statically-linked binary to ensure it runs in the minimal Docker container.
    - CGO_ENABLED=0 go build -o syac -ldflags '-extldflags "-static"' .
  after_script:
    - chmod +x syac
    - ./syac context
  artifacts:
    paths:
      - syac
    expire_in: 1 hour



# -----------------------------------------------------------------------------
# 1) Feature builds (local-only)
# -----------------------------------------------------------------------------
build_feature:
  extends: .build-dind
  stage: build
  dependencies:
    - build_binary
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^gm-[0-9]+$/ && $CI_PIPELINE_SOURCE != "merge_request_event"'
      when: always
    - when: never
  before_script:
    - chmod +x syac
    - ./syac context
  script:
    - echo "Building feature image (no push) $BRANCH_IMAGE:$IMAGE_SHORT"
    - ./syac build
    - ./syac push
    # - docker build -t "$BRANCH_IMAGE:$IMAGE_SHORT" .

# -----------------------------------------------------------------------------
# 2) RC build on MR → dev
# -----------------------------------------------------------------------------
build_rc:
  extends:
    - .build-dind
  stage: build-rc
  environment:
    name: dev
    url: https://dev.apps.openshift.com 
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
      when: always
    - when: never
  script:
    - docker pull "$REG:dev-latest" || true
    - docker build --cache-from "$REG:dev-latest" -t "$REG:dev-$IMAGE_SHORT" .
    - docker push "$REG:dev-$IMAGE_SHORT"
    - docker tag "$REG:dev-$IMAGE_SHORT" "$REG:dev-latest"
    - docker push "$REG:dev-latest"

# -----------------------------------------------------------------------------
# 3) Secret Detection scan
# -----------------------------------------------------------------------------
.secret-analyzer:
  stage: scan
  image: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION$SECRET_DETECTION_IMAGE_SUFFIX"
  services: []
  allow_failure: false
  variables:
    GIT_DEPTH: "50"
  artifacts:
    access: developer
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json

secret_detection:
  extends: .secret-analyzer
  needs: ["build_rc"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
      when: always
    - when: never
  script:
    - /analyzer run

# -----------------------------------------------------------------------------
# 4) Promote dev → test
# -----------------------------------------------------------------------------
promote_to_test:
  extends:
    - .build-dind
  needs:
    - secret_detection
  stage: promote
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'
      when: always
    - when: never
  script:
    - syac-promote --from dev-$IMAGE_SHORT --to test --push-latest

# -----------------------------------------------------------------------------
# 5) Promote test → int
# -----------------------------------------------------------------------------
promote_to_int:
  extends:
    - .build-dind
  needs:
    - promote_to_test
  stage: promote
  rules:
    - if: '$CI_COMMIT_BRANCH == "int"'
      when: always
    - when: never
  script:
    - syac-promote --from test-$IMAGE_SHORT --to int --push-latest

# -----------------------------------------------------------------------------
# 6) Release on master → semver + latest
# -----------------------------------------------------------------------------
create_release:
  extends:
    - .build-dind
  needs:
    - promote_to_int
  stage: release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: always
    - when: never
  script:
    - syac-promote --from int-$IMAGE_SHORT --release